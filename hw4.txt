1、
close all;
clear
clc;
[filename, pathname] = uigetfile({'*.jpg'; '*.bmp'; '*.gif'}, '选择图片');
%没有图像
if filename == 0
    return;
end
Image = imread([pathname, filename]);
[m, n, z] = size(Image); 
%转换为灰度图
if z>1
    Image = rgb2gray(Image);
end
result1 = Gauss_filter(Image, 3);
result2 = Gauss_filter(Image, 5);
result3 = Gauss_filter(Image, 7);
result4 = median_filter(Image, 3);
result5 = median_filter(Image, 5);
result6 = median_filter(Image, 7);
 figure(1)
 subplot(2,2,1);
 imshow(Image);
colormap(gray);
 title('原图像');
 subplot(2,2,2);
 imshow(result1);
colormap(gray);
 title('高斯滤波后3*3');    
  subplot(2,2,3);
  imshow(result2);
colormap(gray);
  title('高斯滤波后5*5');
   subplot(2,2,4);
    imshow(result3);
    colormap(gray);
    title('高斯滤波后7*7');
    
    figure(2)
 subplot(2,2,1);
    imshow(Image);
    title('原图像');
 subplot(2,2,2);
    imshow(result4);
    title('中值滤波后3*3');
  subplot(2,2,3);
    imshow(result5);
    title('中值滤波后5*5');
   subplot(2,2,4);
    imshow(result6);
    title('中值滤波后7*7');
    

function [ img ] = median_filter( image, m )

    n = m;

    [ height, width ] = size(image);

    x1 = double(image);

    x2 = x1;

    for i = 1: height-n+1

        for j = 1:width-n+1

            mb = x1( i:(i+n-1),  j:(j+n-1) );

            mb = mb(:);

            mm = median(mb);

            x2( i+(n-1)/2,  j+(n-1)/2 ) = mm;

 

        end

    end
    img = uint8(x2);

end

function [ img ] = Gauss_filter ( image, m )


%own gaussian function 

I = double(image);%convert unit8 to double 

myimg = I;

[rows, cols] = size(I);

sie = m;

conv = zeros(sie,sie);%高斯核

segma = 1;

sum = 0;

center  = 3;

for i=1:sie

	for j=1:sie

		%%利用高斯函数计算模板的各个参数

		temp = exp ( -((i-center)*(i-center) + (j-center)*(j-center)) / 2*segma*segma );

		conv(i,j) = temp / (2*3.14*segma*segma);

		sum =sum +  conv(i,j);

	end

end

conv = conv ./ sum;

disp('kernel');

display(conv);

%use gaussian kernel to smooth image

for k=1:rows

	for m= 1:cols

	    sum =0;

		%%卷积：模板与图像对应部分相乘再累加

		for i=1:sie

			for j=1:sie

				if( ( (k-center+i) > 0 && (k-center+i) <= rows ) && ((m-center+j)>0 && (m-center+j)<=cols) )

					sum = sum + conv(i,j) * I(k-center+i, m-center+j);

				end

			end

		end

		%%替换掉原像素

		myimg(k,m) = sum;

	end

end

img=uint8(myimg);


2、利用固定方差产生高斯滤波器

function [ img ] = Gauss_filter ( image, m )


%own gaussian function 

I = double(image);%convert unit8 to double 

myimg = I;

[rows, cols] = size(I);

sie = m;

conv = zeros(sie,sie);%高斯核

segma = 1.5;

sum = 0;

center  = 3;

for i=1:sie

	for j=1:sie

		%%利用高斯函数计算模板的各个参数

		temp = exp ( -((i-center)*(i-center) + (j-center)*(j-center)) / 2*segma*segma );

		conv(i,j) = temp / (2*3.14*segma*segma);

		sum =sum +  conv(i,j);

	end

end

conv = conv ./ sum;

disp('kernel');

display(conv);

%use gaussian kernel to smooth image

for k=1:rows

	for m= 1:cols

	    sum =0;

		%%卷积：模板与图像对应部分相乘再累加

		for i=1:sie

			for j=1:sie

				if( ( (k-center+i) > 0 && (k-center+i) <= rows ) && ((m-center+j)>0 && (m-center+j)<=cols) )

					sum = sum + conv(i,j) * I(k-center+i, m-center+j);

				end

			end

		end

		%%替换掉原像素

		myimg(k,m) = sum;

	end

end

img=uint8(myimg);


3、

close all;
clear
clc;
[filename, pathname] = uigetfile({'*.jpg'; '*.bmp'; '*.gif'}, '选择图片');
%没有图像
if filename == 0
    return;
end
Image = imread([pathname, filename]);
I=Image;
%figure;
%subplot(221);
%imshow(I);
IMsize=size(Image);
Image=cast(Image,'int32');
t=zeros(IMsize(1)+2,IMsize(2)+2);
t=cast(t,'int32');
t(2:IMsize(1)+1,2:IMsize(2)+1)=Image;
t(:,1)=t(:,2);
t(:,IMsize(2)+2)=t(:,IMsize(2)+1);
t(1,:)=t(2,:);
t(IMsize(1)+2,:)=t(IMsize(1)+1);
A=1.0;
for i=2:1:IMsize(1)+1
    for j=2:1:IMsize(2)+1
        Image(i-1,j-1)=t(i,j)*A-(t(i,j)*(-8)+t(i,j-1)+t(i-1,j-1)+t(i-1,j)+t(i,j+1)+t(i+1,j)+t(i+1,j+1)+t(i+1,j-1)+t(i-1,j+1));
    end
end
Image=cast(Image,'uint8');
imwrite(Image,['Unsharp_masking',num2str(10*A),'.png'],'png');
subplot(221)
imshow(Image);
title('Unsharp masking');
%sobel edge detector
I1=I;
[N,M]=size(I1);
I1=double(I1);
h1=[-1,0,1;-2,0,2;-1,0,1];
h2=[-1,-2,1;0,0,0;1,2,1];
Gx=conv2(I1,h1,'same');
Gy=conv2(I1,h2,'same');
F=abs(Gx)+abs(Gy);
for i=1:N
    for j=1:M
        I1(i,j)=F(i,j);
    end
end
I1=uint8(I1);
subplot(222)
imshow(I1);
title('Soble edge detector');
%Laplace edge detection
t=ones(N,M);
t=I;
I2=I;
for i=2:N-1
    for j=2:M-1
        I2(i,j)=t(i+1,j)+t(i-1,j)+t(i,j+1)+t(i,j-1)-4*t(i,j);
    end
end
subplot(223)
imshow(I2)
title('Laplace edge detector');
I3=edge(I,'canny');
subplot(224);
imshow(I3);
title('Canny algorithm');
        





